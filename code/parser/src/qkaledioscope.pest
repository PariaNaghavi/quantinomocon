program = _{ SOI ~ (file_element)* ~ EOI }

file_element = _{ (declaration | definition) }
declaration = { Extern ~ prototype ~ Semicolon }
definition = { Def ~ prototype ~ definition_body }
prototype = { Ident ~ arg_list ~ (return_decl)? }
arg_list = { OpeningParenthesis ~ (arg_decl ~ Comma?)* ~ ClosingParenthesis }
arg_decl = { Ident ~ Colon ~ type_sig }
return_decl = { RightArrow ~ type_sig }
type_sig = _{ (number_type | qubit_type | bit_type) }
number_type = { NumberKeyword }
qubit_type = { QubitKeyword }
bit_type = { BitKeyword }

definition_body = _{ OpenCurly ~ (statement)* ~ CloseCurly }

statement = _{ 
    (
        ((variable_declaration | assignment | call_expr  ) ~ Semicolon) |
        if_stmt | while_stmt
    )
}
if_stmt = { if_block ~ else_block? }
if_block = { IfKeyword ~ expression ~ OpenCurly ~ (statement)* ~ CloseCurly }
else_block = { ElseKeyword ~ OpenCurly ~ (statement*) ~ CloseCurly }
while_stmt = { WhileKeyword ~ expression ~ OpenCurly ~ (statement)* ~ CloseCurly }
variable_declaration = { VarKeyword ~ Ident ~ Colon ~ type_sig ~ Equals ~ expression }
assignment = { Ident ~ Equals ~ expression }

expression = _{ primary_expr }
primary_expr = _{ (parenthesis_expr | call_expr | Ident | literal) }
literal = _{ (number_literal | qubit_literal | bit_literal) }
number_literal = @{ Number }
qubit_literal = @{ Pound ~ Integer }
bit_literal = @{ (TrueKeyword | FalseKeyword) }
call_expr = { Ident ~ OpeningParenthesis ~ (expression ~ Comma?)* ~ ClosingParenthesis }
parenthesis_expr = _{ OpeningParenthesis ~ expression ~ ClosingParenthesis }

// Terminals
RightArrow = _{ "->" }
OpeningParenthesis = _{ "(" }
ClosingParenthesis = _{ ")" }
OpenCurly = _{ "{" }
CloseCurly = _{ "}" }
Colon = _{ ":" }
Comma = _{ "," }
Pound = _{ "#" }
Semicolon = _{ ";" }
Equals = _{ "=" }

Def = _{ "def" }
Extern = _{ "extern" }
IfKeyword = _{ "if" }
WhileKeyword = _{ "while" }
ElseKeyword = _{ "else" }
BitKeyword = _{ "bit" }
NumberKeyword = _{ "number" }
QubitKeyword = _{ "qubit" }
VarKeyword = _{ "var" }
TrueKeyword = { "true" }
FalseKeyword = { "false" }

Integer = @{ ASCII_DIGIT* }
Number = @{ ((ASCII_DIGIT* ~ "." ~ ASCII_DIGIT*) | ASCII_DIGIT+) }
Ident = @{ XID_START ~ XID_CONTINUE* }

WHITESPACE = _{ WHITE_SPACE }

